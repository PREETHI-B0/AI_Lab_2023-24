# Ex.No: 10 Learning â€“ Use Supervised Learning  
### DATE:05-05-2024                                                                            
### REGISTER NUMBER : 212221220040
### AIM: 
To write a program to transcribe speech from an audio file into text using machine learning. Specifically, the program utilizes the Google Speech Recognition service to convert spoken language into written text, showcasing the practical application of machine learning in speech processing tasks.
###  Algorithm:
Step 1: Import Libraries
Step 2: Load Audio File
Step 3: Create Recognizer Instance
Step 4: Record Audio
Step 5: Speech Recognition
Step 6: Exception Handling
Step 7: Convert Speech to Text
Step 8: Output Transcribed Text
Step 9: Finalize
Step 10: End
Step 11: Import the necessary libraries like SpeechRecognition.
Step 12: Load the audio file.
Step 13: Create an instance of the Recognizer class.
Step 14: Use the `record()` method to capture audio from the file.
Step 15: Apply speech recognition using the `recognize_google()` method.
Step 16: Handle possible errors like unclear speech or network issues.
Step 17: Convert the recognized speech into text.
Steps 18: Print or store the transcribed text.
Step 19: Close any resources.
Step 20: End.
~~~
### Program:
!pip install SpeechRecognition  # If you're running this in a Jupyter notebook

import speech_recognition as sr

# Assign a string variable "file" with the name of the audio file that you want to transcribe.
file = "/content/harvard.wav"

# Create an instance of the Recognizer class called "r".
r = sr.Recognizer()

# Use the AudioFile() method of sr to create an AudioFile object with the audio file name passed as an argument.
with sr.AudioFile(file) as source:
    audio = r.record(source)

# Use the recognize_google() method of r to transcribe the audio data stored in the "audio" variable.
try:
    text = r.recognize_google(audio)
except sr.UnknownValueError:
    print("Not clear")
except sr.RequestError as e:
    print("Couldn't get results from Google Speech Recognition service; {0}".format(e))

# Print the text in the next lines.
for line in text.splitlines():
    print(line)
~~~
### Output:


### Result:
Thus the system was trained successfully and the prediction was carried out.
